// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createItem = `-- name: CreateItem :execresult
INSERT INTO items (
  name, quantity, price
) VALUES (
  ?, ?, ?
)
`

type CreateItemParams struct {
	Name     string `json:"name"`
	Quantity int32  `json:"quantity"`
	Price    int32  `json:"price"`
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createItem, arg.Name, arg.Quantity, arg.Price)
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (
  email, password
) VALUES (
  ?, ?
)
`

type CreateUserParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.Email, arg.Password)
}

const getItemByID = `-- name: GetItemByID :one
SELECT id, name, quantity, price, created_at, updated_at FROM items
WHERE id = ? LIMIT 1
`

func (q *Queries) GetItemByID(ctx context.Context, id int64) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItemByID, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Quantity,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, created_at, updated_at, deleted_at FROM users
WHERE email = ? LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password, created_at, updated_at, deleted_at FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
